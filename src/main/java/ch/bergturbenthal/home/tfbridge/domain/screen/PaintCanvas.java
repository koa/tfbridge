package ch.bergturbenthal.home.tfbridge.domain.screen;

import lombok.extern.slf4j.Slf4j;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

@Slf4j
public class PaintCanvas implements Canvas {
  public static final  int     CHARACTER_WIDTH  = 6;
  public static final  int     CHARACTER_HEIGHT = 8;
  private static final Charset FONT_CHARSET     = Charset.forName("IBM437");
  private static final short[] FONT             = {
          0x00, 0x00, 0x00, 0x00, 0x00,
          0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
          0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
          0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
          0x18, 0x3C, 0x7E, 0x3C, 0x18,
          0x1C, 0x57, 0x7D, 0x57, 0x1C,
          0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
          0x00, 0x18, 0x3C, 0x18, 0x00,
          0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
          0x00, 0x18, 0x24, 0x18, 0x00,
          0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
          0x30, 0x48, 0x3A, 0x06, 0x0E,
          0x26, 0x29, 0x79, 0x29, 0x26,
          0x40, 0x7F, 0x05, 0x05, 0x07,
          0x40, 0x7F, 0x05, 0x25, 0x3F,
          0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
          0x7F, 0x3E, 0x1C, 0x1C, 0x08,
          0x08, 0x1C, 0x1C, 0x3E, 0x7F,
          0x14, 0x22, 0x7F, 0x22, 0x14,
          0x5F, 0x5F, 0x00, 0x5F, 0x5F,
          0x06, 0x09, 0x7F, 0x01, 0x7F,
          0x00, 0x66, 0x89, 0x95, 0x6A,
          0x60, 0x60, 0x60, 0x60, 0x60,
          0x94, 0xA2, 0xFF, 0xA2, 0x94,
          0x08, 0x04, 0x7E, 0x04, 0x08,
          0x10, 0x20, 0x7E, 0x20, 0x10,
          0x08, 0x08, 0x2A, 0x1C, 0x08,
          0x08, 0x1C, 0x2A, 0x08, 0x08,
          0x1E, 0x10, 0x10, 0x10, 0x10,
          0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
          0x30, 0x38, 0x3E, 0x38, 0x30,
          0x06, 0x0E, 0x3E, 0x0E, 0x06,
          0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x5F, 0x00, 0x00,
          0x00, 0x07, 0x00, 0x07, 0x00,
          0x14, 0x7F, 0x14, 0x7F, 0x14,
          0x24, 0x2A, 0x7F, 0x2A, 0x12,
          0x23, 0x13, 0x08, 0x64, 0x62,
          0x36, 0x49, 0x56, 0x20, 0x50,
          0x00, 0x08, 0x07, 0x03, 0x00,
          0x00, 0x1C, 0x22, 0x41, 0x00,
          0x00, 0x41, 0x22, 0x1C, 0x00,
          0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
          0x08, 0x08, 0x3E, 0x08, 0x08,
          0x00, 0x80, 0x70, 0x30, 0x00,
          0x08, 0x08, 0x08, 0x08, 0x08,
          0x00, 0x00, 0x60, 0x60, 0x00,
          0x20, 0x10, 0x08, 0x04, 0x02,
          0x3E, 0x51, 0x49, 0x45, 0x3E,
          0x00, 0x42, 0x7F, 0x40, 0x00,
          0x72, 0x49, 0x49, 0x49, 0x46,
          0x21, 0x41, 0x49, 0x4D, 0x33,
          0x18, 0x14, 0x12, 0x7F, 0x10,
          0x27, 0x45, 0x45, 0x45, 0x39,
          0x3C, 0x4A, 0x49, 0x49, 0x31,
          0x41, 0x21, 0x11, 0x09, 0x07,
          0x36, 0x49, 0x49, 0x49, 0x36,
          0x46, 0x49, 0x49, 0x29, 0x1E,
          0x00, 0x00, 0x14, 0x00, 0x00,
          0x00, 0x40, 0x34, 0x00, 0x00,
          0x00, 0x08, 0x14, 0x22, 0x41,
          0x14, 0x14, 0x14, 0x14, 0x14,
          0x00, 0x41, 0x22, 0x14, 0x08,
          0x02, 0x01, 0x59, 0x09, 0x06,
          0x3E, 0x41, 0x5D, 0x59, 0x4E,
          0x7C, 0x12, 0x11, 0x12, 0x7C,
          0x7F, 0x49, 0x49, 0x49, 0x36,
          0x3E, 0x41, 0x41, 0x41, 0x22,
          0x7F, 0x41, 0x41, 0x41, 0x3E,
          0x7F, 0x49, 0x49, 0x49, 0x41,
          0x7F, 0x09, 0x09, 0x09, 0x01,
          0x3E, 0x41, 0x41, 0x51, 0x73,
          0x7F, 0x08, 0x08, 0x08, 0x7F,
          0x00, 0x41, 0x7F, 0x41, 0x00,
          0x20, 0x40, 0x41, 0x3F, 0x01,
          0x7F, 0x08, 0x14, 0x22, 0x41,
          0x7F, 0x40, 0x40, 0x40, 0x40,
          0x7F, 0x02, 0x1C, 0x02, 0x7F,
          0x7F, 0x04, 0x08, 0x10, 0x7F,
          0x3E, 0x41, 0x41, 0x41, 0x3E,
          0x7F, 0x09, 0x09, 0x09, 0x06,
          0x3E, 0x41, 0x51, 0x21, 0x5E,
          0x7F, 0x09, 0x19, 0x29, 0x46,
          0x26, 0x49, 0x49, 0x49, 0x32,
          0x03, 0x01, 0x7F, 0x01, 0x03,
          0x3F, 0x40, 0x40, 0x40, 0x3F,
          0x1F, 0x20, 0x40, 0x20, 0x1F,
          0x3F, 0x40, 0x38, 0x40, 0x3F,
          0x63, 0x14, 0x08, 0x14, 0x63,
          0x03, 0x04, 0x78, 0x04, 0x03,
          0x61, 0x59, 0x49, 0x4D, 0x43,
          0x00, 0x7F, 0x41, 0x41, 0x41,
          0x02, 0x04, 0x08, 0x10, 0x20,
          0x00, 0x41, 0x41, 0x41, 0x7F,
          0x04, 0x02, 0x01, 0x02, 0x04,
          0x40, 0x40, 0x40, 0x40, 0x40,
          0x00, 0x03, 0x07, 0x08, 0x00,
          0x20, 0x54, 0x54, 0x78, 0x40,
          0x7F, 0x28, 0x44, 0x44, 0x38,
          0x38, 0x44, 0x44, 0x44, 0x28,
          0x38, 0x44, 0x44, 0x28, 0x7F,
          0x38, 0x54, 0x54, 0x54, 0x18,
          0x00, 0x08, 0x7E, 0x09, 0x02,
          0x18, 0xA4, 0xA4, 0x9C, 0x78,
          0x7F, 0x08, 0x04, 0x04, 0x78,
          0x00, 0x44, 0x7D, 0x40, 0x00,
          0x20, 0x40, 0x40, 0x3D, 0x00,
          0x7F, 0x10, 0x28, 0x44, 0x00,
          0x00, 0x41, 0x7F, 0x40, 0x00,
          0x7C, 0x04, 0x78, 0x04, 0x78,
          0x7C, 0x08, 0x04, 0x04, 0x78,
          0x38, 0x44, 0x44, 0x44, 0x38,
          0xFC, 0x18, 0x24, 0x24, 0x18,
          0x18, 0x24, 0x24, 0x18, 0xFC,
          0x7C, 0x08, 0x04, 0x04, 0x08,
          0x48, 0x54, 0x54, 0x54, 0x24,
          0x04, 0x04, 0x3F, 0x44, 0x24,
          0x3C, 0x40, 0x40, 0x20, 0x7C,
          0x1C, 0x20, 0x40, 0x20, 0x1C,
          0x3C, 0x40, 0x30, 0x40, 0x3C,
          0x44, 0x28, 0x10, 0x28, 0x44,
          0x4C, 0x90, 0x90, 0x90, 0x7C,
          0x44, 0x64, 0x54, 0x4C, 0x44,
          0x00, 0x08, 0x36, 0x41, 0x00,
          0x00, 0x00, 0x77, 0x00, 0x00,
          0x00, 0x41, 0x36, 0x08, 0x00,
          0x02, 0x01, 0x02, 0x04, 0x02,
          0x3C, 0x26, 0x23, 0x26, 0x3C,
          0x1E, 0xA1, 0xA1, 0x61, 0x12,
          0x3A, 0x40, 0x40, 0x20, 0x7A,
          0x38, 0x54, 0x54, 0x55, 0x59,
          0x21, 0x55, 0x55, 0x79, 0x41,
          0x22, 0x54, 0x54, 0x78, 0x42,
          0x21, 0x55, 0x54, 0x78, 0x40,
          0x20, 0x54, 0x55, 0x79, 0x40,
          0x0C, 0x1E, 0x52, 0x72, 0x12,
          0x39, 0x55, 0x55, 0x55, 0x59,
          0x39, 0x54, 0x54, 0x54, 0x59,
          0x39, 0x55, 0x54, 0x54, 0x58,
          0x00, 0x00, 0x45, 0x7C, 0x41,
          0x00, 0x02, 0x45, 0x7D, 0x42,
          0x00, 0x01, 0x45, 0x7C, 0x40,
          0x7D, 0x12, 0x11, 0x12, 0x7D,
          0xF0, 0x28, 0x25, 0x28, 0xF0,
          0x7C, 0x54, 0x55, 0x45, 0x00,
          0x20, 0x54, 0x54, 0x7C, 0x54,
          0x7C, 0x0A, 0x09, 0x7F, 0x49,
          0x32, 0x49, 0x49, 0x49, 0x32,
          0x3A, 0x44, 0x44, 0x44, 0x3A,
          0x32, 0x4A, 0x48, 0x48, 0x30,
          0x3A, 0x41, 0x41, 0x21, 0x7A,
          0x3A, 0x42, 0x40, 0x20, 0x78,
          0x00, 0x9D, 0xA0, 0xA0, 0x7D,
          0x3D, 0x42, 0x42, 0x42, 0x3D,
          0x3D, 0x40, 0x40, 0x40, 0x3D,
          0x3C, 0x24, 0xFF, 0x24, 0x24,
          0x48, 0x7E, 0x49, 0x43, 0x66,
          0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
          0xFF, 0x09, 0x29, 0xF6, 0x20,
          0xC0, 0x88, 0x7E, 0x09, 0x03,
          0x20, 0x54, 0x54, 0x79, 0x41,
          0x00, 0x00, 0x44, 0x7D, 0x41,
          0x30, 0x48, 0x48, 0x4A, 0x32,
          0x38, 0x40, 0x40, 0x22, 0x7A,
          0x00, 0x7A, 0x0A, 0x0A, 0x72,
          0x7D, 0x0D, 0x19, 0x31, 0x7D,
          0x26, 0x29, 0x29, 0x2F, 0x28,
          0x26, 0x29, 0x29, 0x29, 0x26,
          0x30, 0x48, 0x4D, 0x40, 0x20,
          0x38, 0x08, 0x08, 0x08, 0x08,
          0x08, 0x08, 0x08, 0x08, 0x38,
          0x2F, 0x10, 0xC8, 0xAC, 0xBA,
          0x2F, 0x10, 0x28, 0x34, 0xFA,
          0x00, 0x00, 0x7B, 0x00, 0x00,
          0x08, 0x14, 0x2A, 0x14, 0x22,
          0x22, 0x14, 0x2A, 0x14, 0x08,
          0x55, 0x00, 0x55, 0x00, 0x55,
          0xAA, 0x55, 0xAA, 0x55, 0xAA,
          0xFF, 0x55, 0xFF, 0x55, 0xFF,
          0x00, 0x00, 0x00, 0xFF, 0x00,
          0x10, 0x10, 0x10, 0xFF, 0x00,
          0x14, 0x14, 0x14, 0xFF, 0x00,
          0x10, 0x10, 0xFF, 0x00, 0xFF,
          0x10, 0x10, 0xF0, 0x10, 0xF0,
          0x14, 0x14, 0x14, 0xFC, 0x00,
          0x14, 0x14, 0xF7, 0x00, 0xFF,
          0x00, 0x00, 0xFF, 0x00, 0xFF,
          0x14, 0x14, 0xF4, 0x04, 0xFC,
          0x14, 0x14, 0x17, 0x10, 0x1F,
          0x10, 0x10, 0x1F, 0x10, 0x1F,
          0x14, 0x14, 0x14, 0x1F, 0x00,
          0x10, 0x10, 0x10, 0xF0, 0x00,
          0x00, 0x00, 0x00, 0x1F, 0x10,
          0x10, 0x10, 0x10, 0x1F, 0x10,
          0x10, 0x10, 0x10, 0xF0, 0x10,
          0x00, 0x00, 0x00, 0xFF, 0x10,
          0x10, 0x10, 0x10, 0x10, 0x10,
          0x10, 0x10, 0x10, 0xFF, 0x10,
          0x00, 0x00, 0x00, 0xFF, 0x14,
          0x00, 0x00, 0xFF, 0x00, 0xFF,
          0x00, 0x00, 0x1F, 0x10, 0x17,
          0x00, 0x00, 0xFC, 0x04, 0xF4,
          0x14, 0x14, 0x17, 0x10, 0x17,
          0x14, 0x14, 0xF4, 0x04, 0xF4,
          0x00, 0x00, 0xFF, 0x00, 0xF7,
          0x14, 0x14, 0x14, 0x14, 0x14,
          0x14, 0x14, 0xF7, 0x00, 0xF7,
          0x14, 0x14, 0x14, 0x17, 0x14,
          0x10, 0x10, 0x1F, 0x10, 0x1F,
          0x14, 0x14, 0x14, 0xF4, 0x14,
          0x10, 0x10, 0xF0, 0x10, 0xF0,
          0x00, 0x00, 0x1F, 0x10, 0x1F,
          0x00, 0x00, 0x00, 0x1F, 0x14,
          0x00, 0x00, 0x00, 0xFC, 0x14,
          0x00, 0x00, 0xF0, 0x10, 0xF0,
          0x10, 0x10, 0xFF, 0x10, 0xFF,
          0x14, 0x14, 0x14, 0xFF, 0x14,
          0x10, 0x10, 0x10, 0x1F, 0x00,
          0x00, 0x00, 0x00, 0xF0, 0x10,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
          0xFF, 0xFF, 0xFF, 0x00, 0x00,
          0x00, 0x00, 0x00, 0xFF, 0xFF,
          0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
          0x38, 0x44, 0x44, 0x38, 0x44,
          0xFC, 0x4A, 0x4A, 0x4A, 0x34,
          0x7E, 0x02, 0x02, 0x06, 0x06,
          0x02, 0x7E, 0x02, 0x7E, 0x02,
          0x63, 0x55, 0x49, 0x41, 0x63,
          0x38, 0x44, 0x44, 0x3C, 0x04,
          0x40, 0x7E, 0x20, 0x1E, 0x20,
          0x06, 0x02, 0x7E, 0x02, 0x02,
          0x99, 0xA5, 0xE7, 0xA5, 0x99,
          0x1C, 0x2A, 0x49, 0x2A, 0x1C,
          0x4C, 0x72, 0x01, 0x72, 0x4C,
          0x30, 0x4A, 0x4D, 0x4D, 0x30,
          0x30, 0x48, 0x78, 0x48, 0x30,
          0xBC, 0x62, 0x5A, 0x46, 0x3D,
          0x3E, 0x49, 0x49, 0x49, 0x00,
          0x7E, 0x01, 0x01, 0x01, 0x7E,
          0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
          0x44, 0x44, 0x5F, 0x44, 0x44,
          0x40, 0x51, 0x4A, 0x44, 0x40,
          0x40, 0x44, 0x4A, 0x51, 0x40,
          0x00, 0x00, 0xFF, 0x01, 0x03,
          0xE0, 0x80, 0xFF, 0x00, 0x00,
          0x08, 0x08, 0x6B, 0x6B, 0x08,
          0x36, 0x12, 0x36, 0x24, 0x36,
          0x06, 0x0F, 0x09, 0x0F, 0x06,
          0x00, 0x00, 0x18, 0x18, 0x00,
          0x00, 0x00, 0x10, 0x10, 0x00,
          0x30, 0x40, 0xFF, 0x01, 0x01,
          0x00, 0x1F, 0x01, 0x01, 0x1E,
          0x00, 0x19, 0x1D, 0x17, 0x12,
          0x00, 0x3C, 0x3C, 0x3C, 0x3C,
          0x00, 0x00, 0x00, 0x00, 0x00
  };
  private final        Painter painter;

  public PaintCanvas(final Painter painter) {
    this.painter = painter;
  }

  @Override
  public void drawBoxedString(
          int sx, int sy, int ex, int ey, String str, boolean color, BoxStyle boxStyle) {
    int boxWidth = ex - sx;
    int boxHeight = ey - sy;
    int textWidth = str.length() * CHARACTER_WIDTH;
    int textHeight = CHARACTER_HEIGHT;
    if (textWidth >= boxWidth) {
      throw new IllegalArgumentException(
              "Box too narrow " + describeDimensions(sx, sy, ex, ey, str));
    }
    if (textHeight >= boxHeight)
      throw new IllegalArgumentException(
              "Box too short " + describeDimensions(sx, sy, ex, ey, str));
    drawString(
            sx + boxWidth / 2 - textWidth / 2, sy + boxHeight / 2 - CHARACTER_HEIGHT / 2, str, color);
    drawBox(sx, sy, ex, ey, boxStyle, color);
  }

  @Override
  public void drawBoxedIcon(
          int sx, int sy, int ex, int ey, Icon icon, boolean color, BoxStyle boxStyle) {
    int boxWidth = ex - sx;
    int boxHeight = ey - sy;
    int iconWidth = icon.getWidth();
    int iconHeight = icon.getHeight();
    if (iconWidth >= boxWidth) {
      throw new IllegalArgumentException(
              "Box too narrow " + describeIconDimensions(sx, sy, ex, ey, icon));
    }
    if (iconHeight >= boxHeight)
      throw new IllegalArgumentException(
              "Box too short " + describeIconDimensions(sx, sy, ex, ey, icon));
    icon.paint(
            sx + boxWidth / 2 - iconWidth / 2, sy + boxHeight / 2 - iconHeight / 2, painter, color);
    drawBox(sx, sy, ex, ey, boxStyle, color);
  }

  @Override
  public Canvas createWindow(final int wx, final int wy, final int ex, final int ey) {
    final PaintCanvas parentCanvas = PaintCanvas.this;
    return new WindowCanvas(parentCanvas, wx, wy, ex, ey);
  }

  @Override
  public void setPixel(final int x, final int y, final boolean enable) {
    painter.setPixel(x, y, enable);
  }

  @Override
  public int getWidth() {
    return painter.getWidth();
  }

  @Override
  public int getHeight() {
    return painter.getHeight();
  }

  private String describeIconDimensions(
          final int sx, final int sy, final int ex, final int ey, final Icon icon) {
    return "("
            + sx
            + ", "
            + sy
            + ", "
            + ex
            + ", "
            + ey
            + "/ "
            + icon.getWidth()
            + ", "
            + icon.getHeight()
            + ")";
  }

  private void drawBox(
          final int sx,
          final int sy,
          final int ex,
          final int ey,
          final BoxStyle boxStyle,
          boolean color) {
    switch (boxStyle) {
      case EMPTY:
        break;
      case DASHED:
        for (int x = sx; x < ex; x++) {
          boolean invert = x / 2 % 2 == 0;
          painter.setPixel(x, sy, invert ^ color);
          painter.setPixel(x, ey - 1, invert ^ color);
        }
        for (int y = sy; y < ey; y++) {
          boolean invert = y / 2 % 2 == 0;
          painter.setPixel(sx, y, invert ^ color);
          painter.setPixel(ex - 1, y, invert ^ color);
        }
        break;
      case SOLID:
        for (int x = sx; x < ex; x++) {
          painter.setPixel(x, sy, color);
          painter.setPixel(x, ey - 1, color);
        }
        for (int y = sy; y < ey; y++) {
          painter.setPixel(sx, y, color);
          painter.setPixel(ex - 1, y, color);
        }
        break;
      case ROUNDED:
        painter.setPixel(sx + 1, sy + 1, color);
        painter.setPixel(ex - 2, sy + 1, color);
        painter.setPixel(sx + 1, ey - 2, color);
        painter.setPixel(ex - 2, ey - 2, color);
        for (int x = sx + 2; x < ex - 2; x++) {
          painter.setPixel(x, sy, color);
          painter.setPixel(x, ey - 1, color);
        }
        for (int y = sy + 2; y < ey - 2; y++) {
          painter.setPixel(sx, y, color);
          painter.setPixel(ex - 1, y, color);
        }
        break;
    }
  }

  private String describeDimensions(
          final int sx, final int sy, final int ex, final int ey, final String str) {
    return "(" + sx + ", " + sy + ", " + ex + ", " + ey + ", " + str.length() + " Characters)";
  }

  public void drawString(final int px, final int py, final String str, final boolean color) {
    final ByteBuffer characters = FONT_CHARSET.encode(str);
    for (int i = 0; i < characters.limit(); i++) {
      drawCharacter(characters.get(i), px + i * CHARACTER_WIDTH, py, color);
    }
  }

  private void drawCharacter(final byte character, final int px, final int py, boolean color) {

    for (int j = 0; j < CHARACTER_HEIGHT + 1; j++) {
      painter.setPixel(px, py + j, !color);
      painter.setPixel(CHARACTER_WIDTH + px, py + j, !color);
    }
    for (int i = 0; i < CHARACTER_WIDTH - 1; i++) {
      painter.setPixel(1 + i + px, py, !color);
      final byte bits = (byte) FONT[(((int) character) & 0xff) * (CHARACTER_WIDTH - 1) + i];
      for (int j = 0; j < CHARACTER_HEIGHT; j++) {
        final boolean pixelEnabled = (bits >> j & 1) != 0;
        final int x = i + px + 1;
        final int y = j + py + 1;
        final boolean set = pixelEnabled ^ color;
        painter.setPixel(x, y, !set);
      }
    }
  }

  public void clear(final boolean inverted) {
    painter.fill(0, 0, painter.getWidth(), painter.getHeight(), !inverted);
  }

  public TouchConsumer drawScreen(final List<Renderable> renderables) {
    clear(false);
    List<Renderable> selectedRenderables = new ArrayList<>();
    int consumedHeight = 0;
    double remainingSpaceWeight = 0;
    for (Renderable r : renderables) {
      final int height = r.getMinHeight();
      if (height + consumedHeight > this.getHeight()) break;
      selectedRenderables.add(r);
      consumedHeight += height;
      remainingSpaceWeight += r.getExpandRatio();
    }
    int remainingHeight = this.getHeight() - consumedHeight;
    double additionalSpaceFactor = remainingHeight / remainingSpaceWeight;
    int currentStartPos = 0;
    List<Integer> startRows = new ArrayList<>();
    for (Renderable r : selectedRenderables) {
      int componentHeight = (int) (r.getMinHeight() + additionalSpaceFactor * r.getExpandRatio());
      int endPos = currentStartPos + componentHeight;
      final Canvas window = this.createWindow(0, currentStartPos, this.getWidth(), endPos);
      r.render(window);
      startRows.add(currentStartPos);
      currentStartPos = endPos;
    }
    return (x, y, pressure, age) -> {
      int foundEntry = startRows.size() - 1;
      for (int i = 0; i < startRows.size(); i++) {
        final int currentStartRow = startRows.get(i);
        if (currentStartRow > y) {
          foundEntry = i - 1;
          break;
        }
      }
      if (foundEntry < 0) return;
      final Renderable renderable = selectedRenderables.get(foundEntry);
      if (renderable instanceof TouchConsumer) {
        int elementOffset = startRows.get(foundEntry);
        ((TouchConsumer) renderable).notifyTouch(x, y - elementOffset, pressure, age);
      }
    };
  }

  private static class WindowCanvas implements Canvas {
    private final int    width;
    private final int    height;
    private final int    wx;
    private final int    wy;
    private final Canvas parentCanvas;

    public WindowCanvas(
            final Canvas parentCanvas, final int wx, final int wy, final int ex, final int ey) {
      this.wx = wx;
      this.wy = wy;
      this.parentCanvas = parentCanvas;
      width = ex - wx;
      height = ey - wy;
    }

    @Override
    public void drawBoxedString(
            final int sx,
            final int sy,
            final int ex,
            final int ey,
            final String str,
            final boolean color,
            final BoxStyle boxStyle) {
      if (sx > width || ey > height || sx < 0 || ey < 0)
        throw new IllegalArgumentException("Coordinates outside of window");
      parentCanvas.drawBoxedString(sx + wx, sy + wy, ex + wx, ey + wy, str, color, boxStyle);
    }

    @Override
    public void drawBoxedIcon(
            final int sx,
            final int sy,
            final int ex,
            final int ey,
            final Icon icon,
            final boolean color,
            final BoxStyle boxStyle) {
      if (sx > width || ey > height || sx < 0 || ey < 0)
        throw new IllegalArgumentException("Coordinates outside of window");
      parentCanvas.drawBoxedIcon(sx + wx, sy + wy, ex + wx, ey + wy, icon, color, boxStyle);
    }

    @Override
    public Canvas createWindow(final int sx, final int sy, final int ex, final int ey) {
      if (sx > width || ey > height || sx < 0 || ey < 0)
        throw new IllegalArgumentException("Coordinates outside of window");
      return new WindowCanvas(this, sx + wx, sy + wy, ex + wx, ey + wy);
    }

    @Override
    public void setPixel(final int x, final int y, final boolean enable) {
      parentCanvas.setPixel(x + wx, y + wy, enable);
    }

    @Override
    public int getWidth() {
      return width;
    }

    @Override
    public int getHeight() {
      return height;
    }
  }
}
