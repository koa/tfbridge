package ch.bergturbenthal.home.tfbridge;

import ch.bergturbenthal.home.tfbridge.domain.screen.Canvas;
import ch.bergturbenthal.home.tfbridge.domain.screen.*;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

@Slf4j
public class TestJava2D {
  static short[] font = {
          0x00, 0x00, 0x00, 0x00, 0x00,
          0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
          0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
          0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
          0x18, 0x3C, 0x7E, 0x3C, 0x18,
          0x1C, 0x57, 0x7D, 0x57, 0x1C,
          0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
          0x00, 0x18, 0x3C, 0x18, 0x00,
          0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
          0x00, 0x18, 0x24, 0x18, 0x00,
          0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
          0x30, 0x48, 0x3A, 0x06, 0x0E,
          0x26, 0x29, 0x79, 0x29, 0x26,
          0x40, 0x7F, 0x05, 0x05, 0x07,
          0x40, 0x7F, 0x05, 0x25, 0x3F,
          0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
          0x7F, 0x3E, 0x1C, 0x1C, 0x08,
          0x08, 0x1C, 0x1C, 0x3E, 0x7F,
          0x14, 0x22, 0x7F, 0x22, 0x14,
          0x5F, 0x5F, 0x00, 0x5F, 0x5F,
          0x06, 0x09, 0x7F, 0x01, 0x7F,
          0x00, 0x66, 0x89, 0x95, 0x6A,
          0x60, 0x60, 0x60, 0x60, 0x60,
          0x94, 0xA2, 0xFF, 0xA2, 0x94,
          0x08, 0x04, 0x7E, 0x04, 0x08,
          0x10, 0x20, 0x7E, 0x20, 0x10,
          0x08, 0x08, 0x2A, 0x1C, 0x08,
          0x08, 0x1C, 0x2A, 0x08, 0x08,
          0x1E, 0x10, 0x10, 0x10, 0x10,
          0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
          0x30, 0x38, 0x3E, 0x38, 0x30,
          0x06, 0x0E, 0x3E, 0x0E, 0x06,
          0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x5F, 0x00, 0x00,
          0x00, 0x07, 0x00, 0x07, 0x00,
          0x14, 0x7F, 0x14, 0x7F, 0x14,
          0x24, 0x2A, 0x7F, 0x2A, 0x12,
          0x23, 0x13, 0x08, 0x64, 0x62,
          0x36, 0x49, 0x56, 0x20, 0x50,
          0x00, 0x08, 0x07, 0x03, 0x00,
          0x00, 0x1C, 0x22, 0x41, 0x00,
          0x00, 0x41, 0x22, 0x1C, 0x00,
          0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
          0x08, 0x08, 0x3E, 0x08, 0x08,
          0x00, 0x80, 0x70, 0x30, 0x00,
          0x08, 0x08, 0x08, 0x08, 0x08,
          0x00, 0x00, 0x60, 0x60, 0x00,
          0x20, 0x10, 0x08, 0x04, 0x02,
          0x3E, 0x51, 0x49, 0x45, 0x3E,
          0x00, 0x42, 0x7F, 0x40, 0x00,
          0x72, 0x49, 0x49, 0x49, 0x46,
          0x21, 0x41, 0x49, 0x4D, 0x33,
          0x18, 0x14, 0x12, 0x7F, 0x10,
          0x27, 0x45, 0x45, 0x45, 0x39,
          0x3C, 0x4A, 0x49, 0x49, 0x31,
          0x41, 0x21, 0x11, 0x09, 0x07,
          0x36, 0x49, 0x49, 0x49, 0x36,
          0x46, 0x49, 0x49, 0x29, 0x1E,
          0x00, 0x00, 0x14, 0x00, 0x00,
          0x00, 0x40, 0x34, 0x00, 0x00,
          0x00, 0x08, 0x14, 0x22, 0x41,
          0x14, 0x14, 0x14, 0x14, 0x14,
          0x00, 0x41, 0x22, 0x14, 0x08,
          0x02, 0x01, 0x59, 0x09, 0x06,
          0x3E, 0x41, 0x5D, 0x59, 0x4E,
          0x7C, 0x12, 0x11, 0x12, 0x7C,
          0x7F, 0x49, 0x49, 0x49, 0x36,
          0x3E, 0x41, 0x41, 0x41, 0x22,
          0x7F, 0x41, 0x41, 0x41, 0x3E,
          0x7F, 0x49, 0x49, 0x49, 0x41,
          0x7F, 0x09, 0x09, 0x09, 0x01,
          0x3E, 0x41, 0x41, 0x51, 0x73,
          0x7F, 0x08, 0x08, 0x08, 0x7F,
          0x00, 0x41, 0x7F, 0x41, 0x00,
          0x20, 0x40, 0x41, 0x3F, 0x01,
          0x7F, 0x08, 0x14, 0x22, 0x41,
          0x7F, 0x40, 0x40, 0x40, 0x40,
          0x7F, 0x02, 0x1C, 0x02, 0x7F,
          0x7F, 0x04, 0x08, 0x10, 0x7F,
          0x3E, 0x41, 0x41, 0x41, 0x3E,
          0x7F, 0x09, 0x09, 0x09, 0x06,
          0x3E, 0x41, 0x51, 0x21, 0x5E,
          0x7F, 0x09, 0x19, 0x29, 0x46,
          0x26, 0x49, 0x49, 0x49, 0x32,
          0x03, 0x01, 0x7F, 0x01, 0x03,
          0x3F, 0x40, 0x40, 0x40, 0x3F,
          0x1F, 0x20, 0x40, 0x20, 0x1F,
          0x3F, 0x40, 0x38, 0x40, 0x3F,
          0x63, 0x14, 0x08, 0x14, 0x63,
          0x03, 0x04, 0x78, 0x04, 0x03,
          0x61, 0x59, 0x49, 0x4D, 0x43,
          0x00, 0x7F, 0x41, 0x41, 0x41,
          0x02, 0x04, 0x08, 0x10, 0x20,
          0x00, 0x41, 0x41, 0x41, 0x7F,
          0x04, 0x02, 0x01, 0x02, 0x04,
          0x40, 0x40, 0x40, 0x40, 0x40,
          0x00, 0x03, 0x07, 0x08, 0x00,
          0x20, 0x54, 0x54, 0x78, 0x40,
          0x7F, 0x28, 0x44, 0x44, 0x38,
          0x38, 0x44, 0x44, 0x44, 0x28,
          0x38, 0x44, 0x44, 0x28, 0x7F,
          0x38, 0x54, 0x54, 0x54, 0x18,
          0x00, 0x08, 0x7E, 0x09, 0x02,
          0x18, 0xA4, 0xA4, 0x9C, 0x78,
          0x7F, 0x08, 0x04, 0x04, 0x78,
          0x00, 0x44, 0x7D, 0x40, 0x00,
          0x20, 0x40, 0x40, 0x3D, 0x00,
          0x7F, 0x10, 0x28, 0x44, 0x00,
          0x00, 0x41, 0x7F, 0x40, 0x00,
          0x7C, 0x04, 0x78, 0x04, 0x78,
          0x7C, 0x08, 0x04, 0x04, 0x78,
          0x38, 0x44, 0x44, 0x44, 0x38,
          0xFC, 0x18, 0x24, 0x24, 0x18,
          0x18, 0x24, 0x24, 0x18, 0xFC,
          0x7C, 0x08, 0x04, 0x04, 0x08,
          0x48, 0x54, 0x54, 0x54, 0x24,
          0x04, 0x04, 0x3F, 0x44, 0x24,
          0x3C, 0x40, 0x40, 0x20, 0x7C,
          0x1C, 0x20, 0x40, 0x20, 0x1C,
          0x3C, 0x40, 0x30, 0x40, 0x3C,
          0x44, 0x28, 0x10, 0x28, 0x44,
          0x4C, 0x90, 0x90, 0x90, 0x7C,
          0x44, 0x64, 0x54, 0x4C, 0x44,
          0x00, 0x08, 0x36, 0x41, 0x00,
          0x00, 0x00, 0x77, 0x00, 0x00,
          0x00, 0x41, 0x36, 0x08, 0x00,
          0x02, 0x01, 0x02, 0x04, 0x02,
          0x3C, 0x26, 0x23, 0x26, 0x3C,
          0x1E, 0xA1, 0xA1, 0x61, 0x12,
          0x3A, 0x40, 0x40, 0x20, 0x7A,
          0x38, 0x54, 0x54, 0x55, 0x59,
          0x21, 0x55, 0x55, 0x79, 0x41,
          0x22, 0x54, 0x54, 0x78, 0x42,
          0x21, 0x55, 0x54, 0x78, 0x40,
          0x20, 0x54, 0x55, 0x79, 0x40,
          0x0C, 0x1E, 0x52, 0x72, 0x12,
          0x39, 0x55, 0x55, 0x55, 0x59,
          0x39, 0x54, 0x54, 0x54, 0x59,
          0x39, 0x55, 0x54, 0x54, 0x58,
          0x00, 0x00, 0x45, 0x7C, 0x41,
          0x00, 0x02, 0x45, 0x7D, 0x42,
          0x00, 0x01, 0x45, 0x7C, 0x40,
          0x7D, 0x12, 0x11, 0x12, 0x7D,
          0xF0, 0x28, 0x25, 0x28, 0xF0,
          0x7C, 0x54, 0x55, 0x45, 0x00,
          0x20, 0x54, 0x54, 0x7C, 0x54,
          0x7C, 0x0A, 0x09, 0x7F, 0x49,
          0x32, 0x49, 0x49, 0x49, 0x32,
          0x3A, 0x44, 0x44, 0x44, 0x3A,
          0x32, 0x4A, 0x48, 0x48, 0x30,
          0x3A, 0x41, 0x41, 0x21, 0x7A,
          0x3A, 0x42, 0x40, 0x20, 0x78,
          0x00, 0x9D, 0xA0, 0xA0, 0x7D,
          0x3D, 0x42, 0x42, 0x42, 0x3D,
          0x3D, 0x40, 0x40, 0x40, 0x3D,
          0x3C, 0x24, 0xFF, 0x24, 0x24,
          0x48, 0x7E, 0x49, 0x43, 0x66,
          0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
          0xFF, 0x09, 0x29, 0xF6, 0x20,
          0xC0, 0x88, 0x7E, 0x09, 0x03,
          0x20, 0x54, 0x54, 0x79, 0x41,
          0x00, 0x00, 0x44, 0x7D, 0x41,
          0x30, 0x48, 0x48, 0x4A, 0x32,
          0x38, 0x40, 0x40, 0x22, 0x7A,
          0x00, 0x7A, 0x0A, 0x0A, 0x72,
          0x7D, 0x0D, 0x19, 0x31, 0x7D,
          0x26, 0x29, 0x29, 0x2F, 0x28,
          0x26, 0x29, 0x29, 0x29, 0x26,
          0x30, 0x48, 0x4D, 0x40, 0x20,
          0x38, 0x08, 0x08, 0x08, 0x08,
          0x08, 0x08, 0x08, 0x08, 0x38,
          0x2F, 0x10, 0xC8, 0xAC, 0xBA,
          0x2F, 0x10, 0x28, 0x34, 0xFA,
          0x00, 0x00, 0x7B, 0x00, 0x00,
          0x08, 0x14, 0x2A, 0x14, 0x22,
          0x22, 0x14, 0x2A, 0x14, 0x08,
          0x55, 0x00, 0x55, 0x00, 0x55,
          0xAA, 0x55, 0xAA, 0x55, 0xAA,
          0xFF, 0x55, 0xFF, 0x55, 0xFF,
          0x00, 0x00, 0x00, 0xFF, 0x00,
          0x10, 0x10, 0x10, 0xFF, 0x00,
          0x14, 0x14, 0x14, 0xFF, 0x00,
          0x10, 0x10, 0xFF, 0x00, 0xFF,
          0x10, 0x10, 0xF0, 0x10, 0xF0,
          0x14, 0x14, 0x14, 0xFC, 0x00,
          0x14, 0x14, 0xF7, 0x00, 0xFF,
          0x00, 0x00, 0xFF, 0x00, 0xFF,
          0x14, 0x14, 0xF4, 0x04, 0xFC,
          0x14, 0x14, 0x17, 0x10, 0x1F,
          0x10, 0x10, 0x1F, 0x10, 0x1F,
          0x14, 0x14, 0x14, 0x1F, 0x00,
          0x10, 0x10, 0x10, 0xF0, 0x00,
          0x00, 0x00, 0x00, 0x1F, 0x10,
          0x10, 0x10, 0x10, 0x1F, 0x10,
          0x10, 0x10, 0x10, 0xF0, 0x10,
          0x00, 0x00, 0x00, 0xFF, 0x10,
          0x10, 0x10, 0x10, 0x10, 0x10,
          0x10, 0x10, 0x10, 0xFF, 0x10,
          0x00, 0x00, 0x00, 0xFF, 0x14,
          0x00, 0x00, 0xFF, 0x00, 0xFF,
          0x00, 0x00, 0x1F, 0x10, 0x17,
          0x00, 0x00, 0xFC, 0x04, 0xF4,
          0x14, 0x14, 0x17, 0x10, 0x17,
          0x14, 0x14, 0xF4, 0x04, 0xF4,
          0x00, 0x00, 0xFF, 0x00, 0xF7,
          0x14, 0x14, 0x14, 0x14, 0x14,
          0x14, 0x14, 0xF7, 0x00, 0xF7,
          0x14, 0x14, 0x14, 0x17, 0x14,
          0x10, 0x10, 0x1F, 0x10, 0x1F,
          0x14, 0x14, 0x14, 0xF4, 0x14,
          0x10, 0x10, 0xF0, 0x10, 0xF0,
          0x00, 0x00, 0x1F, 0x10, 0x1F,
          0x00, 0x00, 0x00, 0x1F, 0x14,
          0x00, 0x00, 0x00, 0xFC, 0x14,
          0x00, 0x00, 0xF0, 0x10, 0xF0,
          0x10, 0x10, 0xFF, 0x10, 0xFF,
          0x14, 0x14, 0x14, 0xFF, 0x14,
          0x10, 0x10, 0x10, 0x1F, 0x00,
          0x00, 0x00, 0x00, 0xF0, 0x10,
          0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
          0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
          0xFF, 0xFF, 0xFF, 0x00, 0x00,
          0x00, 0x00, 0x00, 0xFF, 0xFF,
          0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
          0x38, 0x44, 0x44, 0x38, 0x44,
          0xFC, 0x4A, 0x4A, 0x4A, 0x34,
          0x7E, 0x02, 0x02, 0x06, 0x06,
          0x02, 0x7E, 0x02, 0x7E, 0x02,
          0x63, 0x55, 0x49, 0x41, 0x63,
          0x38, 0x44, 0x44, 0x3C, 0x04,
          0x40, 0x7E, 0x20, 0x1E, 0x20,
          0x06, 0x02, 0x7E, 0x02, 0x02,
          0x99, 0xA5, 0xE7, 0xA5, 0x99,
          0x1C, 0x2A, 0x49, 0x2A, 0x1C,
          0x4C, 0x72, 0x01, 0x72, 0x4C,
          0x30, 0x4A, 0x4D, 0x4D, 0x30,
          0x30, 0x48, 0x78, 0x48, 0x30,
          0xBC, 0x62, 0x5A, 0x46, 0x3D,
          0x3E, 0x49, 0x49, 0x49, 0x00,
          0x7E, 0x01, 0x01, 0x01, 0x7E,
          0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
          0x44, 0x44, 0x5F, 0x44, 0x44,
          0x40, 0x51, 0x4A, 0x44, 0x40,
          0x40, 0x44, 0x4A, 0x51, 0x40,
          0x00, 0x00, 0xFF, 0x01, 0x03,
          0xE0, 0x80, 0xFF, 0x00, 0x00,
          0x08, 0x08, 0x6B, 0x6B, 0x08,
          0x36, 0x12, 0x36, 0x24, 0x36,
          0x06, 0x0F, 0x09, 0x0F, 0x06,
          0x00, 0x00, 0x18, 0x18, 0x00,
          0x00, 0x00, 0x10, 0x10, 0x00,
          0x30, 0x40, 0xFF, 0x01, 0x01,
          0x00, 0x1F, 0x01, 0x01, 0x1E,
          0x00, 0x19, 0x1D, 0x17, 0x12,
          0x00, 0x3C, 0x3C, 0x3C, 0x3C,
          0x00, 0x00, 0x00, 0x00, 0x00
  };

  @Test
  public void testRender() throws IOException, FontFormatException {
    // Charset.availableCharsets().keySet().forEach(name -> log.info("Charset: " + name));
    String text = "012345678°9abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZäöüÄÖÜ        ";
    final PngPainter pngPainter = new PngPainter();

    // final InputStream isr = new ClassPathResource("unifont-13.0.05.ttf").getInputStream();
    // final Font font = new Font("Courier New", 0, 12);
    // final AffineTransform at = AffineTransform.getScaleInstance(1 + 0.007, 1.0);
    // graphics.setTransform(at);
    // graphics.setFont(Font.createFont(Font.TRUETYPE_FONT, isr).deriveFont(12.1f));
    // graphics.drawString("8°", 0, 110);
    /*
    final LineMetrics hello = font.getLineMetrics("Hello", graphics.getFontRenderContext());
    log.info("Ascent: " + hello.getAscent());
    log.info("Descent: " + hello.getDescent());
    log.info("Height: " + hello.getHeight());

    for (int i = 0; i < text.length() / 10; i++) {
      graphics.drawString(text.substring(i * 10, (i + 1) * 10), 0, (i + 1) * 12);
    }*/
    /*
    char pos = '°';
    font[pos * 5] = 0x0;
    font[pos * 5 + 1] = 0x4;
    font[pos * 5 + 2] = 0xa;
    font[pos * 5 + 3] = 0x4;
    font[pos * 5 + 4] = 0x0;
     */
    final PaintCanvas canvas = new PaintCanvas(pngPainter);

    final int px = 64 / 2 - 5 * PaintCanvas.CHARACTER_WIDTH / 2;
    final int py = 16 / 2 - PaintCanvas.CHARACTER_HEIGHT / 2;
    log.info("x: " + px + ", y: " + py);
    canvas.clear(true);
    final RenderableTime renderableTime = new RenderableTime();
    // final Canvas timeCanvas = canvas.createWindow(0, 0, 64, 16);
    // renderableTime.render(timeCanvas);
    // timeCanvas.drawCenteredString("14:24", false, BoxStyle.EMPTY);
    final RenderableText currentTemperatureRenderer = new RenderableText(BoxStyle.DASHED, 0.5f);
    currentTemperatureRenderer.setText("24.5°");
    // currentTemperatureRenderer.render(canvas.createWindow(0, 16, 64, 40));

    final RenderableNumber brightSelection = new RenderableNumber(255, 0.5, Icons.BRIGHT_ICON, 1, 2);
    // brightSelection.render(canvas.createWindow(0, 51, 64, 66));

    final RenderableNumber colorSelection = new RenderableNumber(255, 0.5, Icons.COLOR_ICON, 1, 2);
    // colorSelection.render(canvas.createWindow(0, 79, 64, 94));

    final RenderableNumber renderableNumber = new RenderableNumber(24.0, 0.5, null, 15, 30);

    // renderableNumber.render(canvas.createWindow(0, 106, 64, 121));

    final List<Renderable> renderables =
            Arrays.asList(
                    renderableTime // ,
                    // currentTemperatureRenderer,
                    // brightSelection,
                    // colorSelection,
                    //    renderableNumber
            );
    canvas.drawScreen(renderables);

    pngPainter.store(new File("target/out.png"));
  }

  public void addPlusMinusButtons(final Canvas line1Window) {
    line1Window.drawBoxedString(
            1, 1, 18, line1Window.getHeight() - 1, "-", false, BoxStyle.ROUNDED);
    line1Window.drawBoxedString(
            line1Window.getWidth() - 18,
            1,
            line1Window.getWidth() - 1,
            line1Window.getHeight() - 1,
            "+",
            false,
            BoxStyle.ROUNDED);
  }
}
